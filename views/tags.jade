extends layout

block content
  h4 Click on one of the tags generated in the cloud below to recommend a location to travel to based on the tag clicked
  -var d1 = []
  -var d2= []
  -var cityList = []
  for tag in tags
    - d1.push(tag.text)
    - d2.push(tag.size)
    #wordList.col
    
    
  script(src='http://d3js.org/d3.v3.min.js')
  script(src='https://rawgit.com/jasondavies/d3-cloud/master/build/d3.layout.cloud.js', charset='utf-8')
  script.
      var objectsName = '#{d1}'
      var objectsSize = '#{d2}'
      var cityListNames = '#{cityList}'
      var objectsNameArray = objectsName.split(',');
      var objectsSizeArray = objectsSize.split(',');
      console.log(objectsNameArray)
      var data = [];
      for (var i = 0; i < objectsSizeArray.length; i++) {
      	data.push({
      		text: objectsNameArray[i],
      		size: objectsSizeArray[i] * 2 + 10
      	})
      	};
      console.log(data);
      var tagsToAdd = []
      function wordCloud(selector) {
      var fill = d3.scale.category20();
      //Construct the word cloud's SVG element
      var svg = d3.select(selector).append("svg")
      .attr("width", 500)
      .attr("height", 500)
      .append("g")
      .attr("transform", "translate(250,250)");
      //Draw the word cloud
      function draw(words) {
      var cloud = svg.selectAll("g text")
      .data(words, function(d) { return d.text; })
      //Entering words
      cloud.enter()
      .append("text")
      .style("font-family", "Impact")
      .style("fill", function(d, i) { return fill(i); })
      .attr("text-anchor", "middle")
      .attr('font-size', 1)
      .text(function(d) { return d.text; })
      .each(function() {
      d3.select(this).on("click", function (d) {
      var text = d3.select(this).text();
      var weight = 0
      data = data.filter(function (el) {
      if (el.text === text) {
      weight = el.size
      return false;
      }
      return true;
      });
      tagsToAdd.push({"text": text, "weight":weight})
      expString = ""
      for (var i = 0; i < tagsToAdd.length; i++) {
      	expString += tagsToAdd[i].text
      	expString += " "
      }

      var sExpediaKey = "ZjxRGGYdEG5DAiUBo3dDdqBCCIo313Qh";
      var sExpediaRequestRoot = "http://terminal2.expedia.com/x/nlp/results?q=";
      var sCompleteKey = "&apikey=" + sExpediaKey;
      var sFinalQuery = sExpediaRequestRoot + expString + sCompleteKey + "&verbose=true";
      var xmlHttp = new XMLHttpRequest();
      xmlHttp.open( "GET", sFinalQuery, false ); // false for synchronous request
      xmlHttp.send( null );
      var resp = xmlHttp.responseText;
      
      console.log(resp)
      console.log(resp.length + "HI")
      if (resp.length > 0) {
      resp = JSON.parse(resp)
      var oResponseResult = resp.result;

      console.log(oResponseResult)
      var cities = [];
      for( var i = 0; i < oResponseResult.hotels.length;i++) { 
         var city = oResponseResult.hotels[i].city + ', ' + oResponseResult.hotels[i].state + ', ' + oResponseResult.hotels[i].country;
         cities.push(city);
      }
      console.log(cities);
      document.getElementById("wordList").innerHTML = cities;
      console.log("heyy " + resp)
      }
      console.log(tagsToAdd);
      showNewWords(myWordCloud);
      });
      });
      //Entering and existing words
      cloud
      .transition()
      .duration(600)
      .style("font-size", function(d) { return d.size + "px"; })
      .attr("transform", function(d) {
      return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
      })
      .style("fill-opacity", 1);
      //Exiting words
      cloud.exit()
      .transition()
      .duration(200)
      .style('fill-opacity', 1e-6)
      .attr('font-size', 1)
      .remove();
      }
      //Use the module pattern to encapsulate the visualisation code. We'll
      // expose only the parts that need to be public.
      return {
      //Recompute the word cloud for a new set of words. This method will
      // asycnhronously call draw when the layout has been computed.
      //The outside world will need to call this function, so make it part
      // of the wordCloud return value.
      update: function(words) {
      d3.layout.cloud().size([500, 500])
      .words(words)
      .padding(5)
      .rotate(function() { return ~~(Math.random() * 2) * 90; })
      .font("Impact")
      .fontSize(function(d) { return d.size; })
      .on("end", draw)
      .start();
      }
      }
      }
      
      //This method tells the word cloud to redraw with a new set of words.
      //In reality the new words would probably come from a server request,
      // user input or some other source.
      function showNewWords(vis, i) {
      vis.update(data)
      // setTimeout(function() { showNewWords(vis, i + 1)}, 2000)
      }
      //Create a new instance of the word cloud visualisation.
      var myWordCloud = wordCloud('body');
      //Start cycling through the demo data
      showNewWords(myWordCloud);

